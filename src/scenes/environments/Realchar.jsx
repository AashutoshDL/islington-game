/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import * as THREE from 'three';

export default function Realcharacter(props) {
    const group = useRef()
  const { nodes, materials, animations } = useGLTF('/models/environment_models/creator.glb')
  const { actions } = useAnimations(animations, group)

  const [keysPressed, setKeysPressed] = useState({})

  const speed = 0.3
  const direction = new THREE.Vector3()

  const animationMap = {
    w: 'CharacterArmature|Run',
    s: 'CharacterArmature|Run_Back',
    a: 'CharacterArmature|Run_Left',
    d: 'CharacterArmature|Run_Right',
  }
const currentAction = useRef(null)

const playAnimation = (key) => {
  const name = animationMap[key]
  if (!name || currentAction.current === name) return

  Object.values(actions).forEach(action => action.fadeOut(0.2))
  const newAction = actions[name]
  if (newAction) {
    newAction.reset().fadeIn(0.2).play()
    currentAction.current = name
  }
}
  /* const playAnimation = (key) => {
    Object.values(actions).forEach(action => action.fadeOut(0.2))
    const name = animationMap[key]
    if (actions[name]) {
      actions[name].reset().fadeIn(0.2).play()
    }
  }
 */
  useEffect(() => {
    const handleKeyDown = (e) => {
      setKeysPressed(prev => ({ ...prev, [e.key.toLowerCase()]: true }))
    }

    const handleKeyUp = (e) => {
      setKeysPressed(prev => {
        const updated = { ...prev, [e.key.toLowerCase()]: false }
        if (!Object.values(updated).includes(true)) {
          Object.values(actions).forEach(action => action.fadeOut(0.2))
        }
        return updated
      })
    }

    window.addEventListener('keydown', handleKeyDown)
    window.addEventListener('keyup', handleKeyUp)
    return () => {
      window.removeEventListener('keydown', handleKeyDown)
      window.removeEventListener('keyup', handleKeyUp)
    }
  }, [actions])

  useFrame(() => {
    if (!group.current) return

    direction.set(0, 0, 0)
    if (keysPressed['w']) direction.z += 0.2
    if (keysPressed['s']) direction.z -= 0.2
    if (keysPressed['a']) direction.x += 0.2
    if (keysPressed['d']) direction.x -= 0.2

    if (direction.lengthSq() > 0) {
      direction.normalize().multiplyScalar(speed)
      group.current.position.add(direction)

      const firstKey = Object.keys(animationMap).find(k => keysPressed[k])
    if (firstKey) playAnimation(firstKey)
  } else {
    currentAction.current = null // reset when idle
  }
})
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group name="CharacterArmature" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <primitive object={nodes.Root} />
          </group>
          <group name="Adventurer_Feet" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Adventurer_Feet_1"
              geometry={nodes.Adventurer_Feet_1.geometry}
              material={materials.Black}
              skeleton={nodes.Adventurer_Feet_1.skeleton}
            />
            <skinnedMesh
              name="Adventurer_Feet_2"
              geometry={nodes.Adventurer_Feet_2.geometry}
              material={materials.Grey}
              skeleton={nodes.Adventurer_Feet_2.skeleton}
            />
          </group>
          <group name="Adventurer_Legs" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Adventurer_Legs_1"
              geometry={nodes.Adventurer_Legs_1.geometry}
              material={materials.Brown2}
              skeleton={nodes.Adventurer_Legs_1.skeleton}
            />
            <skinnedMesh
              name="Adventurer_Legs_2"
              geometry={nodes.Adventurer_Legs_2.geometry}
              material={materials.Brown}
              skeleton={nodes.Adventurer_Legs_2.skeleton}
            />
          </group>
          <group name="Adventurer_Body" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Adventurer_Body_1"
              geometry={nodes.Adventurer_Body_1.geometry}
              material={materials.Green}
              skeleton={nodes.Adventurer_Body_1.skeleton}
            />
            <skinnedMesh
              name="Adventurer_Body_2"
              geometry={nodes.Adventurer_Body_2.geometry}
              material={materials.LightGreen}
              skeleton={nodes.Adventurer_Body_2.skeleton}
            />
            <skinnedMesh
              name="Adventurer_Body_3"
              geometry={nodes.Adventurer_Body_3.geometry}
              material={materials.Skin}
              skeleton={nodes.Adventurer_Body_3.skeleton}
            />
          </group>
          <group name="Adventurer_Head" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Adventurer_Head_1"
              geometry={nodes.Adventurer_Head_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Adventurer_Head_1.skeleton}
            />
            <skinnedMesh
              name="Adventurer_Head_2"
              geometry={nodes.Adventurer_Head_2.geometry}
              material={materials.Eyebrows}
              skeleton={nodes.Adventurer_Head_2.skeleton}
            />
            <skinnedMesh
              name="Adventurer_Head_3"
              geometry={nodes.Adventurer_Head_3.geometry}
              material={materials.Eye}
              skeleton={nodes.Adventurer_Head_3.skeleton}
            />
            <skinnedMesh
              name="Adventurer_Head_4"
              geometry={nodes.Adventurer_Head_4.geometry}
              material={materials.Hair}
              skeleton={nodes.Adventurer_Head_4.skeleton}
            />
          </group>
          <group
            name="Backpack"
            position={[0, 1.373, -0.117]}
            rotation={[-Math.PI / 2, 0, Math.PI]}
            scale={26.077}>
            <skinnedMesh
              name="Backpack_1"
              geometry={nodes.Backpack_1.geometry}
              material={materials.Brown}
              skeleton={nodes.Backpack_1.skeleton}
            />
            <skinnedMesh
              name="Backpack_2"
              geometry={nodes.Backpack_2.geometry}
              material={materials.Green}
              skeleton={nodes.Backpack_2.skeleton}
            />
            <skinnedMesh
              name="Backpack_3"
              geometry={nodes.Backpack_3.geometry}
              material={materials.LightGreen}
              skeleton={nodes.Backpack_3.skeleton}
            />
            <skinnedMesh
              name="Backpack_4"
              geometry={nodes.Backpack_4.geometry}
              material={materials.Gold}
              skeleton={nodes.Backpack_4.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/environment_models/creator.glb')


